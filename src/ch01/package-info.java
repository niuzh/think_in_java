/**
 * @author niu
 * 本章介绍包括开发方法概述在内的OOP的基本概念。
 * 要熟悉面向对象设计的思想，才能轻松的从事此类工作。
 */
package ch01;
/*
第1章 对象导论
1.1 抽象过程
程序员的职责就是建立机器模型和待解决问题模型之间的联系。
OOP允许根据问题来描述问题。每个对象都像一个微型计算机，有状态有操作。
用对象对问题空间的观念给出恰当的表示。可以使用OOP概念对真实世界用代码进行描述。
1.2 每个对象都有一个接口
类描述了具有相同特性和行为的对象集合。程序员通过定义类来适应问题。
任何程序都是设计系统的仿真。
面向对象程序设计就是在问题空间元素和解空间的对象之间创建一对一的隐射。
使用UML类图表示接口及类的设计。
1.3 每个对象都提供服务
开发或理解一个程序设计时，最好的方法是将对象想象为“服务提供者”，也提供了对象的内聚性。
将问题分解为对象集合，对象之间提供服务请求。
1.4 被隐藏的具体实现
程序员分两类，类创建者，类消费者。
访问控制可以让客户端程序员不触及他们不应该触及的部分，让类创建设计人员可以改变类的内部工作方式而不影响客户端程序员。
1.5 复用具体实现
最简单的复用就是使用该类的对象。
继承使用过多会导致难以使用和过分复杂的设计。
1.6 继承
问题空间中类型是有层次结构的，需要使用继承来表示类型层次结构，不需要建立中间模型。
如果需要以现有类为基础，复制并修改他时，就需要使用继承，当父类发生变动时新类也会变动。
UML中箭头从导出类指向基类。
创建基类型表示系统中某些对象的核心概念，从基类型导出其他子类型，来表示此核心可以被实现的不同方式。
通过继承产生的类型等价性是理解面向对象程序设计以及多态的重要门槛。
导出类的建立，1 在导出类添加新方法，需要考虑基类是否需要这些额外方法 2 改变现有基类方法的行为，称为覆盖overriding方法
1.6.1 "是一个"与“像是一个”关系 
*/