/**
 * @author niu
 * 本章介绍包括开发方法概述在内的OOP的基本概念。
 * 要熟悉面向对象设计的思想，才能轻松的从事此类工作。
 * Java的终极目标提高程序员的生产率。
 */
package ch01;
/*
第1章 对象导论
1.1 抽象过程
程序员的职责就是建立机器模型和待解决问题模型之间的联系。
OOP允许根据问题来描述问题。每个对象都像一个微型计算机，有状态有操作。
用对象对问题空间的观念给出恰当的表示。可以使用OOP概念对真实世界用代码进行描述。
1.2 每个对象都有一个接口
类描述了具有相同特性和行为的对象集合。程序员通过定义类来适应问题。
任何程序都是设计系统的仿真。
面向对象程序设计就是在问题空间元素和解空间的对象之间创建一对一的隐射。
使用UML类图表示接口及类的设计。
1.3 每个对象都提供服务
开发或理解一个程序设计时，最好的方法是将对象想象为“服务提供者”，也提供了对象的内聚性。
将问题分解为对象集合，对象之间提供服务请求。
1.4 被隐藏的具体实现
程序员分两类，类创建者，类消费者。
访问控制可以让客户端程序员不触及他们不应该触及的部分，让类创建设计人员可以改变类的内部工作方式而不影响客户端程序员。
1.5 复用具体实现
最简单的复用就是使用该类的对象。
继承使用过多会导致难以使用和过分复杂的设计。
1.6 继承
问题空间中类型是有层次结构的，需要使用继承来表示类型层次结构，不需要建立中间模型。
如果需要以现有类为基础，复制并修改他时，就需要使用继承，当父类发生变动时新类也会变动。
UML中箭头从导出类指向基类。
创建基类型表示系统中某些对象的核心概念，从基类型导出其他子类型，来表示此核心可以被实现的不同方式。
通过继承产生的类型等价性是理解面向对象程序设计以及多态的重要门槛。
导出类的建立，1 在导出类添加新方法，需要考虑基类是否需要这些额外方法 2 改变现有基类方法的行为，称为覆盖overriding方法
1.6.1 "是一个"与“像是一个”关系
导出类与基类完全相同的接口称为替换原则 is-a是一个关系。
导出类中添加新的接口元素称为is-like-a像是一个关系。
1.7 伴随多态的可互换对象
处理类型时把其当作基类对象来对待。
后期绑定的概念：当向对象发送消息时，被调用的代码直到运行时才能确定。
UML图通常基类放在上面，导出类放在下面，所以成为向上转型。
1.8 单根继承结构
所有的类最终都继承自单一的基类。
1.9 容器
在程序运行中不确定需要多少对象，对象存活多少时间，所以需要容器来管理。
可以创建对象来管理，使用数组来管理，java中使用容器来管理
每种语言都有容器，C++是模板类库,Java中包括List(用于存储序列),Map(关联数组,用来建立对象之间的关联),Set(每个对象只保持一个),队列，树，堆栈等等。
不同的容器提供不同的接口和外部行为，不同的容器操作效率不同。
1.9.1 参数化类型
JavaSE5之前容器只能存储通用类型Object。存入时，对象需要向上转型为Object.取出时向下转型但是不安全。
指定容器保存的对象类型称为参数化类型机制，范型。一对尖括号中间包括类型
1.10 对象的创建和生命期
使用对象时，对象需要用资源，关键问题是他们的生成和销毁方式。 
c++程序员自己控制内存对象。
堆栈管理内存对象依赖于存储机制设计。
在堆上创建对象，编译器对对象生命周期一无所知。
java采用动态内存分配方式。使用new 关键字在堆上创建对象。
Java采用垃圾回收器来处理内存释放问题。
1.11 异常处理：处理错误
异常错误是一种对象，在错误处被抛出，被异常处理器捕获并处理。
1.12 并发编程
计算机同一时间处理多个任务。程序中独立运行的部分称为线程。 
并发需要考虑资源共享和资源锁定。
1.13 Java与Internet
java解决了web程序设计问题。
1.13.1 Web是什么
客户服务器计算技术：服务器存储处理信息，客户端请求显示数据。
客户端操作数据需要考虑数据覆盖和事务。客户端程序的部署是重大问题。
web技术把所有数据处理放在服务器，客户端通过浏览器查看提交数据 。
1.13.2 客户端编程
html收集显示数据功能有限，插件，脚本语言，javaScript,java
提高响应速度和用户使用，降低网络流量。
1.13.3 服务器端编程
servlet/jsp
*/